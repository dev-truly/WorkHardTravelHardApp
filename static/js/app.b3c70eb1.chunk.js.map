{"version":3,"sources":["colors.js","App.js"],"names":["theme","App","useState","working","setWorking","text","setText","toDos","setToDos","useEffect","loadToDos","a","async","AsyncStorage","getItem","s","JSON","parse","saveToDos","toSave","setItem","stringify","View","style","styles","container","StatusBar","header","TouchableOpacity","onPress","Text","fontSize","fontWeight","color","TextInput","onSubmitEditing","newToDos","Date","now","input","value","placeholder","onChangeText","payload","ScrollView","Object","keys","map","key","toDo","toDoText","Platform","OS","confirm","Alert","alert","deleteToDos","AntDesign","name","size","StyleSheet","create","flex","backgroundColor","paddingHorizontal","justifyContent","flexDirection","marginTop","paddingVertical","borderRadius","marginVertical","marginBottom","alignItems"],"mappings":"0PAAaA,EACL,QADKA,EAEH,UAFGA,EAGD,U,ylBCgBG,SAASC,IACtB,MAA8BC,oBAAS,GAAvC,WAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAwBF,mBAAS,IAAjC,WAAOG,EAAP,KAAaC,EAAb,KACA,EAA0BJ,mBAAS,IAAnC,WAAOK,EAAP,KAAcC,EAAd,KAEAC,qBAAU,WACRC,MACA,IAEF,IAIMA,EAAY,0BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACDE,IAAaC,QAhBZ,WAeA,QACXC,EADW,SAGhBP,EAASQ,KAAKC,MAAMF,IAHJ,6DAQZG,EAAY,SAAOC,GAAP,SAAAR,EAAAC,OAAA,kEAAAD,EAAA,MACVE,IAAaO,QAxBH,SAwBwBJ,KAAKK,UAAUF,KADvC,6DA6ClB,OACE,eAACG,EAAA,EAAD,CAAMC,MAAOC,EAAOC,UAApB,UACE,cAACC,EAAA,EAAD,CAAWH,MAAM,UACjB,eAACD,EAAA,EAAD,CAAMC,MAAOC,EAAOG,OAApB,UACE,cAACC,EAAA,EAAD,CAAkBC,QA5DX,kBAAMzB,GAAW,IA4DxB,SACE,cAAC0B,EAAA,EAAD,CAAMP,MAAO,CACXQ,SAAU,GACVC,WAAY,MACZC,MAAO9B,EAAU,QAAUH,GAH7B,oBAKF,cAAC4B,EAAA,EAAD,CAAkBC,QAnET,kBAAMzB,GAAW,IAmE1B,SACE,cAAC0B,EAAA,EAAD,CAAMP,MAAO,CACXQ,SAAU,GACVC,WAAY,MACZC,MAAQ9B,EAAoBH,EAAV,SAHpB,yBAMJ,cAACsB,EAAA,EAAD,UACE,cAACY,EAAA,EAAD,CACEC,gBAlCQ,0BAAAxB,EAAAC,OAAA,mDACD,KAATP,EADU,wDAQR+B,EARQ,OAQO7B,GARP,UAQe8B,KAAKC,MAAQ,CAACjC,OAAMF,aACjDK,EAAS4B,GATK,WAAAzB,EAAA,MAURO,EAAUkB,IAVF,OAWd9B,EAAQ,IAXM,6DAmCRiB,MAAOC,EAAOe,MACdC,MAAOnC,EACPoC,YAAatC,EAAU,cAAgB,2BACvCuC,aA9Ea,SAACC,GAAD,OAAarC,EAAQqC,QAiFtC,cAACC,EAAA,EAAD,UAEIC,OAAOC,KAAKvC,GAAOwC,KAAI,SAACC,GAAD,OACrBzC,EAAMyC,GAAK7C,UAAYA,EACzB,eAACmB,EAAA,EAAD,CAAMC,MAAOC,EAAOyB,KAApB,UACE,cAACnB,EAAA,EAAD,CAAMP,MAAOC,EAAO0B,SAApB,SAA+B3C,EAAMyC,GAAK3C,OAC1C,cAACuB,EAAA,EAAD,CAAkBC,QAAS,kBAzEjB,SAAMmB,GAAN,eAAArC,EAAAC,OAAA,mDACE,QAAhBuC,IAASC,GADK,qBAELC,QAAQ,mEAFH,8BAIRjB,EAJQ,KAIO7B,IACLyC,GAChBxC,EAAS4B,GANK,WAAAzB,EAAA,MAORO,EAAUkB,IAPF,+BAWhBkB,IAAMC,MAAM,4BAAS,kEAAiB,CACpC,CAAClD,KAAK,UACN,CAACA,KAAK,KACNkB,MAAO,cACPM,QAAS,0BAAAlB,EAAAC,OAAA,8DACDwB,EADC,KACc7B,IACLyC,GAChBxC,EAAS4B,GAHF,WAAAzB,EAAA,MAIDO,EAAUkB,IAJT,gEAfK,6DAyEuBoB,CAAYR,IAA7C,SAAmD,cAACS,EAAA,EAAD,CAAWC,KAAK,SAASC,KAAM,GAAI1B,MAAM,cAF/De,GAI3B,aAQd,IAAMxB,EAASoC,IAAWC,OAAO,CAC/BpC,UAAW,CACTqC,KAAM,EACNC,gBAAiB/D,EACjBgE,kBAAmB,IAErBrC,OAAQ,CACNsC,eAAgB,gBAChBC,cAAe,MACfC,UAAW,KAEb5B,MAAO,CACLwB,gBAAiB,QACjBK,gBAAiB,GACjBJ,kBAAmB,GACnBK,aAAc,GACdF,UAAW,GACXG,eAAgB,GAChBvC,SAAU,IAEZkB,KAAK,CACHc,gBAAiB/D,EACjBuE,aAAc,GACdH,gBAAiB,GACjBJ,kBAAmB,GACnBK,aAAc,GACdH,cAAe,MACfM,WAAY,SACZP,eAAgB,iBAElBf,SAAS,CACPjB,MAAO,QACPF,SAAU,O","file":"static/js/app.b3c70eb1.chunk.js","sourcesContent":["export const theme = {\n    bg: \"black\",\n    grey: \"#3A3D40\",\n    toDoBg: \"#5C5C60\",\n};","import { StatusBar } from 'expo-status-bar';\nimport { \n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  TextInput,\n  ScrollView,\n  Alert,\n  Platform,\n} from 'react-native';\nimport { useState, useEffect } from 'react';\nimport { theme } from './colors';\n\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { AntDesign } from '@expo/vector-icons';\n\nconst STORAGE_KEY = \"$toDos\";\n\nexport default function App() {\n  const [working, setWorking] = useState(true);\n  const [text, setText] = useState(\"\");\n  const [toDos, setToDos] = useState({});\n\n  useEffect(() => {\n    loadToDos();\n  },[]);\n\n  const travel = () => setWorking(false);\n  const work = () => setWorking(true);\n  const onChangeText = (payload) => setText(payload);\n\n  const loadToDos = async() => {\n   const s = await AsyncStorage.getItem(STORAGE_KEY);\n   if (s) {\n    setToDos(JSON.parse(s));\n   }\n   \n  }\n  \n  const saveToDos = async (toSave) => {\n    await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n  }\n\n  const deleteToDos = async(key) => {\n    if (Platform.OS === \"web\") {\n      const ok = confirm(\"정말 삭제 하시겠습니까?\");\n      if (ok) {\n        const newToDos = {...toDos};\n        delete newToDos[key];\n        setToDos(newToDos);\n        await saveToDos(newToDos);\n      }\n    }\n    else {\n      Alert.alert(\"삭제 확인\", \"정말 삭제 하시겠습니까?\", [\n        {text:\"cancel\"},\n        {text:\"Ok\",\n        style: \"destructive\",  \n        onPress: async () => {\n          const newToDos = {...toDos};\n          delete newToDos[key];\n          setToDos(newToDos);\n          await saveToDos(newToDos);\n        },\n      }]);\n    }\n    \n    \n  }\n  const addToDo = async () => {\n    if (text === \"\") {\n      return;\n    }\n    // save to do\n    // const newToDos = Object.assign({}, toDos,\n    //   {[Date.now()]: {text, work:working}\n    // });\n    const newToDos = {...toDos, [Date.now()]: {text, working}}\n    setToDos(newToDos);\n    await saveToDos(newToDos);\n    setText(\"\");\n    \n  };\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"light\" />\n      <View style={styles.header}>\n        <TouchableOpacity onPress={work}>\n          <Text style={{\n            fontSize: 38,\n            fontWeight: \"600\",\n            color: working ? \"white\" : theme.grey}}>Work</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={travel}>\n          <Text style={{\n            fontSize: 38,\n            fontWeight: \"600\",\n            color: !working ? \"white\" : theme.grey}}>Travel</Text>\n        </TouchableOpacity>\n      </View>\n      <View>\n        <TextInput \n          onSubmitEditing={addToDo}\n          style={styles.input}\n          value={text}\n          placeholder={working ? \"Add a To Do\" : \"Where do you wang to go?\"}\n          onChangeText={onChangeText}\n        />\n      </View>\n      <ScrollView>\n        {\n          Object.keys(toDos).map((key) => (\n            toDos[key].working === working ? (\n          <View style={styles.toDo} key={key}>\n            <Text style={styles.toDoText}>{toDos[key].text}</Text>\n            <TouchableOpacity onPress={() => deleteToDos(key)}><AntDesign name=\"delete\" size={24} color=\"white\" /></TouchableOpacity>\n          </View>\n          ) : null\n          ))\n        }\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 20,\n  },\n  header: {\n    justifyContent: \"space-between\",\n    flexDirection: \"row\",\n    marginTop: 100,\n  },\n  input: {\n    backgroundColor: \"white\",\n    paddingVertical: 15,\n    paddingHorizontal: 20,\n    borderRadius: 30,\n    marginTop: 50,\n    marginVertical: 20,\n    fontSize: 18,\n  },\n  toDo:{\n    backgroundColor: theme.toDoBg,\n    marginBottom: 10,\n    paddingVertical: 20,\n    paddingHorizontal: 40,\n    borderRadius: 15,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n  toDoText:{\n    color: \"white\",\n    fontSize: 16,\n  },\n});\n"],"sourceRoot":""}